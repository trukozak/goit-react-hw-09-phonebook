{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Auth/AuthFormStyled.js","components/Auth/AuthForm.js","pages/AuthPage.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","AuthFormStyled","styled","form","initialState","name","email","password","AuthForm","useState","state","setState","location","useLocation","dispatch","useDispatch","onHandleChange","event","target","prev","autoComplete","onSubmit","preventDefault","pathname","registerOperation","loginOperation","type","placeholder","pattern","title","required","onChange","minLength","AuthPage"],"mappings":"8LAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,4GIwBvFC,E,MA3BQC,EAAOC,KAAV,+c,OCOdC,EAAe,CAAEC,KAAM,GAAIC,MAAO,GAAIC,SAAU,IAwEvCC,EAtEE,WACf,MAA0BC,mBAASL,GAAnC,mBAAOM,EAAP,KAAcC,EAAd,KACMC,EAAWC,cACXC,EAAWC,cAEXC,EAAiB,SAAAC,GACrB,MAAwBA,EAAMC,OAAtBb,EAAR,EAAQA,KAAMT,EAAd,EAAcA,MACde,GAAS,SAAAQ,GAAI,kCAAUA,GAAV,kBAAiBd,EAAOT,QAavC,OACE,eAAC,EAAD,CAAgBwB,aAAa,MAAMC,SAXd,SAAAJ,GACrBA,EAAMK,iBACN,IAAQhB,EAAoBI,EAApBJ,MAAOC,EAAaG,EAAbH,SAEO,cAAtBK,EAASW,SACLT,EAASU,YAAkBd,IAC3BI,EAASW,YAAe,CAAEnB,QAAOC,cACrCI,EAAS,eAAKP,KAId,UACyB,cAAtBQ,EAASW,UACR,yCAEE,uBACEG,KAAK,OACLrB,KAAK,OACLsB,YAAY,aACZP,aAAa,KACbQ,QAAQ,wHACRC,MAAM,kcACNC,UAAQ,EACRlC,MAAOc,EAAML,KACb0B,SAAUf,OAIhB,0CAEE,uBACEU,KAAK,OACLrB,KAAK,QACLsB,YAAY,mBACZP,aAAa,KACbU,UAAQ,EACRlC,MAAOc,EAAMJ,MACbyB,SAAUf,OAGd,6CAEE,uBACEU,KAAK,OACLrB,KAAK,WACLsB,YAAY,iBACZK,UAAU,IACVZ,aAAa,KACbU,UAAQ,EACRlC,MAAOc,EAAMH,SACbwB,SAAUf,OAGd,wBAAQU,KAAK,SAAb,SACyB,cAAtBd,EAASW,SAA2B,WAAa,cCpE3CU,UAJE,WACf,OAAO,cAAC,EAAD","file":"static/js/0.f5c016da.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import styled from 'styled-components';\n\nconst AuthFormStyled = styled.form`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  margin: 10px;\n  padding: 20px;\n  border: 2px solid black;\n  border-radius: 6px;\n\n  label {\n    margin-bottom: 20px;\n  }\n  input {\n    width: 300px;\n    margin-bottom: 10px;\n    margin-left: 5px;\n    padding: 5px;\n    border-color: teal;\n    border-radius: 5px;\n  }\n  button {\n    border-radius: 5px;\n    cursor: pointer;\n    padding: 5px;\n  }\n`;\n\nexport default AuthFormStyled;\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport {\r\n  loginOperation,\r\n  registerOperation,\r\n} from '../../redux/auth/authOperations';\r\nimport AuthFormStyled from './AuthFormStyled';\r\n\r\nconst initialState = { name: '', email: '', password: '' };\r\n\r\nconst AuthForm = () => {\r\n  const [state, setState] = useState(initialState);\r\n  const location = useLocation();\r\n  const dispatch = useDispatch();\r\n\r\n  const onHandleChange = event => {\r\n    const { name, value } = event.target;\r\n    setState(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const onHandleSubmit = event => {\r\n    event.preventDefault();\r\n    const { email, password } = state;\r\n\r\n    location.pathname === '/register'\r\n      ? dispatch(registerOperation(state))\r\n      : dispatch(loginOperation({ email, password }));\r\n    setState({ ...initialState });\r\n  };\r\n\r\n  return (\r\n    <AuthFormStyled autoComplete=\"off\" onSubmit={onHandleSubmit}>\r\n      {location.pathname === '/register' && (\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"Enter name\"\r\n            autoComplete=\"on\"\r\n            pattern=\"^[A-ZA-ZА-ЯА-Я]+(([' -][A-ZA-ZА-ЯА-Я])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={state.name}\r\n            onChange={onHandleChange}\r\n          />\r\n        </label>\r\n      )}\r\n      <label>\r\n        Email\r\n        <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          placeholder=\"blabla@gmail.com\"\r\n          autoComplete=\"on\"\r\n          required\r\n          value={state.email}\r\n          onChange={onHandleChange}\r\n        />\r\n      </label>\r\n      <label>\r\n        Password\r\n        <input\r\n          type=\"text\"\r\n          name=\"password\"\r\n          placeholder=\"Enter password\"\r\n          minLength=\"5\"\r\n          autoComplete=\"on\"\r\n          required\r\n          value={state.password}\r\n          onChange={onHandleChange}\r\n        />\r\n      </label>\r\n      <button type=\"submit\">\r\n        {location.pathname === '/register' ? 'Register' : 'Login'}\r\n      </button>\r\n    </AuthFormStyled>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import React from 'react';\r\nimport AuthForm from '../components/Auth/AuthForm';\r\n\r\nconst AuthPage = () => {\r\n  return <AuthForm />;\r\n};\r\n\r\nexport default AuthPage;\r\n"],"sourceRoot":""}