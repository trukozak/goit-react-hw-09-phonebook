{"version":3,"sources":["components/Section/SectionStyled.js","components/Section/Section.js","redux/contacts/contactsSelector.js","components/Admin/AdvForm.Styled.js","components/Admin/AdvForm.js","redux/contacts/contactsOperations.js","components/Filter/FilterStyled.js","components/Filter/Filter.js","components/ContactsList/ContactsListItem/ContactsListItemStyled.js","components/ContactsList/ContactsListItem/ContactsListItem.js","components/ContactsList/ContactsList.js","pages/ContactsPage.js"],"names":["SectionStyled","styled","section","Section","children","title","className","toUpperCase","getContacts","state","items","contacts","getFilters","filter","getLoadings","loading","getContactsFiltered","createSelector","contact","name","toLowerCase","includes","AdvFormStyled","div","props","colors","button","edit","initialState","number","AdvForm","theme","useContext","ThemeContext","useState","setState","dispatch","useDispatch","useSelector","useEffect","getState","a","fetchContactsRequest","axios","get","headers","Authorization","auth","idToken","data","fetchContactsSuccess","fetchContactsError","message","onHandleChange","e","target","value","prev","onSubmit","preventDefault","find","alert","addContactRequest","post","addContactSuccess","addContactError","type","pattern","required","onChange","FilterStyled","Filter","changeFilter","ContactsListItemStyled","ContactsListItem","id","onClick","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","deleteContactOperation","ContactsList","map","ContactsPage"],"mappings":"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","file":"static/js/4.472cfe25.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const SectionStyled = styled.section`\r\n  font-size: 20px;\r\n  .sectionTitle {\r\n    color: teal;\r\n    padding-left: 15px;\r\n    padding-right: 15px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { SectionStyled } from './SectionStyled';\r\n\r\nconst Section = ({ children, title }) => {\r\n  return (\r\n    <SectionStyled>\r\n      <h2 className=\"sectionTitle\">{title.toUpperCase()}</h2>\r\n      {children}\r\n    </SectionStyled>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = state => state.items.contacts;\r\nexport const getFilters = state => state.items.filter;\r\nexport const getLoadings = state => state.items.loading;\r\n\r\nexport const getContactsFiltered = createSelector(\r\n  [getContacts, getFilters],\r\n  (contacts, filter) => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n","import styled from 'styled-components';\r\n\r\nexport const AdvFormStyled = styled.div`\r\n  padding: 20px 10px;\r\n  border: 2px solid;\r\n  border: 2px solid ${props => props.colors.title};\r\n  border-radius: 6px;\r\n  color: ${props => props.colors.title};\r\n\r\n  .inputName {\r\n    width: 300px;\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n    display: block;\r\n  }\r\n  .btnAdd {\r\n    display: block;\r\n    margin-top: 30px;\r\n    padding: 3px 5px;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n    color: ${props => props.colors.title};\r\n\r\n    background-color: ${props => props.colors.button};\r\n    &:hover {\r\n      background-color: ${props => props.colors.edit};\r\n    }\r\n  }\r\n`;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  addContactOperations,\r\n  fetchContactsOperations,\r\n} from '../../redux/contacts/contactsOperations';\r\nimport { getContacts } from '../../redux/contacts/contactsSelector';\r\nimport { ThemeContext } from '../App';\r\nimport { AdvFormStyled } from './AdvForm.Styled';\r\n\r\nconst initialState = {\r\n  name: '',\r\n  number: '',\r\n};\r\nconst AdvForm = () => {\r\n  const { theme } = useContext(ThemeContext);\r\n\r\n  const [state, setState] = useState(initialState);\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getContacts);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContactsOperations());\r\n  }, [dispatch]);\r\n\r\n  const onHandleChange = e => {\r\n    const { name, value } = e.target;\r\n    setState(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const onHandleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const sameContactName = contacts.find(\r\n      contact => contact.name.toLowerCase() === state.name.toLowerCase(),\r\n    );\r\n    if (sameContactName) {\r\n      return alert(`${state.name} is already in contacts.`);\r\n    }\r\n\r\n    dispatch(\r\n      addContactOperations({\r\n        ...state,\r\n      }),\r\n    );\r\n    setState({ ...initialState });\r\n  };\r\n\r\n  return (\r\n    <AdvFormStyled colors={theme.colors}>\r\n      <form onSubmit={onHandleSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            className=\"inputName\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[A-ZA-ZА-ЯА-Я]+(([' -][A-ZA-ZА-ЯА-Я])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={state.name}\r\n            onChange={onHandleChange}\r\n          />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            className=\"inputName\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={state.number}\r\n            onChange={onHandleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className=\"btnAdd\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </AdvFormStyled>\r\n  );\r\n};\r\n\r\nexport default AdvForm;\r\n","import axios from 'axios';\r\nimport {\r\n  addContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  deleteContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  fetchContactsError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n} from './contactsAction';\r\n\r\nexport const fetchContactsOperations = () => async (dispatch, getState) => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts', {\r\n      headers: { Authorization: `Bearer ${getState().auth.idToken}` },\r\n    });\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error.message));\r\n  }\r\n};\r\n\r\nexport const addContactOperations = contact => async dispatch => {\r\n  dispatch(addContactRequest());\r\n  try {\r\n    const { data } = await axios.post('/contacts', contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error.message));\r\n  }\r\n};\r\n\r\nexport const deleteContactOperation = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error.message));\r\n  }\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const FilterStyled = styled.div`\r\n  margin-left: 10px;\r\n  .inputFilter {\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n    display: block;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeFilter } from '../../redux/contacts/contactsAction';\r\nimport { getFilters } from '../../redux/contacts/contactsSelector';\r\nimport { FilterStyled } from './FilterStyled';\r\n\r\nconst Filter = () => {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector(getFilters);\r\n  const onChange = e => {\r\n    dispatch(changeFilter(e.target.value));\r\n  };\r\n  return (\r\n    <FilterStyled>\r\n      <label className=\"labelFilter\">\r\n        Find contacts by name:\r\n        <input\r\n          className=\"inputFilter\"\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          value={filter}\r\n          onChange={onChange}\r\n        />\r\n      </label>\r\n    </FilterStyled>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import styled from 'styled-components';\r\n\r\nexport const ContactsListItemStyled = styled.div`\r\n  padding-left: 30px;\r\n  list-style: cursor;\r\n  .btnDelete {\r\n    padding: 2px;\r\n    margin: 5px 10px;\r\n    border-radius: 6px;\r\n    background-color: transparent;\r\n    cursor: pointer;\r\n    color: ${props => props.colors.title};\r\n    background-color: ${props => props.colors.button};\r\n    &:hover {\r\n      background-color: ${props => props.colors.edit};\r\n    }\r\n  }\r\n`;\r\n","import React, { useContext } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteContactOperation } from '../../../redux/contacts/contactsOperations';\r\nimport { ThemeContext } from '../../App';\r\nimport { ContactsListItemStyled } from './ContactsListItemStyled';\r\n\r\nconst ContactsListItem = ({ name, number, id }) => {\r\n  const { theme } = useContext(ThemeContext);\r\n  const dispatch = useDispatch();\r\n  const onDeleteItem = () => {\r\n    dispatch(deleteContactOperation(id));\r\n  };\r\n\r\n  return (\r\n    <ContactsListItemStyled colors={theme.colors}>\r\n      <li>\r\n        {name}\r\n        <span>: </span>\r\n        {number}\r\n        <button className=\"btnDelete\" type=\"button\" onClick={onDeleteItem}>\r\n          Delete\r\n        </button>\r\n      </li>\r\n    </ContactsListItemStyled>\r\n  );\r\n};\r\n\r\nexport default ContactsListItem;\r\n","import React from 'react';\r\nimport ContactsListItem from './ContactsListItem/ContactsListItem';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  getContactsFiltered,\r\n  getLoadings,\r\n} from '../../redux/contacts/contactsSelector';\r\nimport { AppLoader } from '../Loader/Loader';\r\n\r\nconst ContactsList = () => {\r\n  const contacts = useSelector(getContactsFiltered);\r\n  const loading = useSelector(getLoadings)\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <>\r\n          <AppLoader />\r\n          <h2>Loading Contacts...</h2>\r\n        </>\r\n      ) : (\r\n        <ul>\r\n          {contacts.map(contact => (\r\n            <ContactsListItem key={contact.id} {...contact} id={contact.id} />\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default ContactsList;\r\n","import React from 'react';\r\nimport AdvForm from '../components/Admin/AdvForm';\r\nimport Filter from '../components/Filter/Filter';\r\nimport ContactsList from '../components/ContactsList/ContactsList';\r\nimport Section from '../components/Section/Section';\r\n\r\nconst ContactsPage = () => {\r\n  return (\r\n    <Section title=''>\r\n      <AdvForm />\r\n      <Filter />\r\n      <ContactsList />\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default ContactsPage;\r\n"],"sourceRoot":""}